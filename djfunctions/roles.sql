CREATE ROLE receptionist;
CREATE ROLE shop_assistant;
CREATE ROLE owner;
CREATE ROLE mechanic;
CREATE ROLE customer;

/*
password allocation
ALTER ROLE receptionist WITH LOGIN PASSWORD 'receptionist_password';
ALTER ROLE shop_assistant WITH LOGIN PASSWORD 'shop_assistant_password';
ALTER ROLE owner WITH LOGIN PASSWORD 'owner_password';
ALTER ROLE mechanic WITH LOGIN PASSWORD 'mechanic_password';
ALTER ROLE customer WITH LOGIN PASSWORD 'customer_password';
*/

CREATE SCHEMA bicycle_repair_shop;


/*
-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-11-01 15:54:09 GMT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE bikeparts (
    partid               VARCHAR2(50 CHAR) NOT NULL,
    partname             VARCHAR2(50 CHAR) NOT NULL,
    suppliers_supplierid INTEGER NOT NULL,
    bikeparts_partid     VARCHAR2(50 CHAR),
    partdescription      VARCHAR2(50 CHAR)
);

ALTER TABLE bikeparts ADD CONSTRAINT bikeparts_pk PRIMARY KEY ( partid );

CREATE TABLE customer (
    customerid  INTEGER NOT NULL,
    firstname   VARCHAR2(25 CHAR) NOT NULL,
    lastname    VARCHAR2(25 CHAR) NOT NULL,
    phonenumber VARCHAR2(10 CHAR) NOT NULL,
    email       VARCHAR2(50 CHAR)
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customerid );

CREATE TABLE customerbike (
    serialnumber        VARCHAR2(50 CHAR) NOT NULL,
    repairstatus        VARCHAR2(1 CHAR) NOT NULL,
    repairnumber        VARCHAR2(25 CHAR) NOT NULL,
    customer_customerid INTEGER NOT NULL,
    modelbike_modelid   INTEGER NOT NULL,
    repairdescription   VARCHAR2(255 CHAR) NOT NULL
);

CREATE UNIQUE INDEX customerbike__idxv1 ON
    customerbike (
        modelbike_modelid
    ASC );

ALTER TABLE customerbike ADD CONSTRAINT customerbike_pk PRIMARY KEY ( serialnumber );

CREATE TABLE haspart (
    modelbike_modelid INTEGER NOT NULL,
    bikeparts_partid  VARCHAR2(50 CHAR) NOT NULL,
    partquantity      INTEGER
);

ALTER TABLE haspart ADD CONSTRAINT haspart_pk PRIMARY KEY ( modelbike_modelid,
                                                            bikeparts_partid );

CREATE TABLE modelbike (
    modelid              INTEGER NOT NULL,
    modelname            VARCHAR2(50 CHAR) NOT NULL,
    suppliers_supplierid INTEGER NOT NULL,
    quantityinstock      INTEGER
);

ALTER TABLE modelbike ADD CONSTRAINT modelbike_pk PRIMARY KEY ( modelid );

CREATE TABLE repairdetails (
    repairid                  INTEGER NOT NULL,
    customerbike_serialnumber VARCHAR2(50 CHAR) NOT NULL,
    labourhours               FLOAT NOT NULL,
    repairdescription         VARCHAR2(250 CHAR) NOT NULL
);

CREATE UNIQUE INDEX repairdetails__idxv1 ON
    repairdetails (
        customerbike_serialnumber
    ASC );

ALTER TABLE repairdetails ADD CONSTRAINT repairdetails_pk PRIMARY KEY ( customerbike_serialnumber,
                                                                        repairid );

CREATE TABLE suppliers (
    supplierid    INTEGER NOT NULL,
    suppliername  VARCHAR2(50 CHAR) NOT NULL,
    contactnumber VARCHAR2(10 CHAR) NOT NULL
);

ALTER TABLE suppliers ADD CONSTRAINT suppliers_pk PRIMARY KEY ( supplierid );

CREATE TABLE "usedPart(s)" (
    repairdetails_repairid INTEGER NOT NULL,
    bikeparts_partid       VARCHAR2(50 CHAR) NOT NULL,
    partquantity           INTEGER NOT NULL
);

ALTER TABLE "usedPart(s)" ADD CONSTRAINT "usedPart(s)_PK" PRIMARY KEY ( bikeparts_partid,
                                                                        repairdetails_repairid );

ALTER TABLE bikeparts
    ADD CONSTRAINT bikeparts_bikeparts_fk FOREIGN KEY ( bikeparts_partid )
        REFERENCES bikeparts ( partid );

ALTER TABLE bikeparts
    ADD CONSTRAINT bikeparts_bikeparts_fkv2 FOREIGN KEY ( suppliers_supplierid )
        REFERENCES suppliers ( supplierid );

ALTER TABLE customerbike
    ADD CONSTRAINT customerbike_customer_fk FOREIGN KEY ( customer_customerid )
        REFERENCES customer ( customerid );

ALTER TABLE customerbike
    ADD CONSTRAINT customerbike_modelbike_fk FOREIGN KEY ( modelbike_modelid )
        REFERENCES modelbike ( modelid );

ALTER TABLE haspart
    ADD CONSTRAINT haspart_bikeparts_fk FOREIGN KEY ( bikeparts_partid )
        REFERENCES bikeparts ( partid );

ALTER TABLE haspart
    ADD CONSTRAINT haspart_modelbike_fk FOREIGN KEY ( modelbike_modelid )
        REFERENCES modelbike ( modelid );

ALTER TABLE modelbike
    ADD CONSTRAINT modelbike_suppliers_fk FOREIGN KEY ( suppliers_supplierid )
        REFERENCES suppliers ( supplierid );

ALTER TABLE repairdetails
    ADD CONSTRAINT repairdetails_customerbike_fk FOREIGN KEY ( customerbike_serialnumber )
        REFERENCES customerbike ( serialnumber );

ALTER TABLE "usedPart(s)"
    ADD CONSTRAINT "usedPart(s)_BikeParts_FK" FOREIGN KEY ( bikeparts_partid )
        REFERENCES bikeparts ( partid );

ALTER TABLE "usedPart(s)"
    ADD CONSTRAINT "usedPart(s)_RepairDetails_FK" FOREIGN KEY ( bikeparts_partid,
                                                                repairdetails_repairid )
        REFERENCES repairdetails ( customerbike_serialnumber,
                                   repairid );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             2
-- ALTER TABLE                             18
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
*/
-- Suppliers Table
-- Create the "suppliers" table
CREATE TABLE suppliers (
    supplierid SERIAL PRIMARY KEY,
    suppliername VARCHAR(50) NOT NULL,
    contactnumber VARCHAR(10) NOT NULL
);

-- Create the "bikeparts" table
CREATE TABLE bikeparts (
    partid VARCHAR(50) NOT NULL PRIMARY KEY,
    partname VARCHAR(50) NOT NULL,
    suppliers_supplierid INTEGER NOT NULL,
    bikeparts_partid VARCHAR(50),
    partdescription VARCHAR(50)
);

-- Create the "customer" table
CREATE TABLE customer (
    customerid SERIAL PRIMARY KEY,
    firstname VARCHAR(25) NOT NULL,
    lastname VARCHAR(25) NOT NULL,
    phonenumber VARCHAR(10) NOT NULL,
    email VARCHAR(50)
);

-- Create the "modelbike" table
CREATE TABLE modelbike (
    modelid SERIAL PRIMARY KEY,
    modelname VARCHAR(50) NOT NULL,
    suppliers_supplierid INTEGER NOT NULL,
    quantityinstock INTEGER
);

-- Create the "customerbike" table
CREATE TABLE customerbike (
    serialnumber VARCHAR(50) NOT NULL PRIMARY KEY,
    repairstatus CHAR(1) NOT NULL,
    repairnumber VARCHAR(25) NOT NULL,
    customer_customerid INTEGER NOT NULL,
    modelbike_modelid INTEGER NOT NULL,
    repairdescription VARCHAR(255) NOT NULL
);

-- Create the "haspart" table
CREATE TABLE haspart (
    modelbike_modelid INTEGER NOT NULL,
    bikeparts_partid VARCHAR(50) NOT NULL,
    partquantity INTEGER,
    PRIMARY KEY (modelbike_modelid, bikeparts_partid)
);

-- Create the "repairdetails" table
CREATE TABLE repairdetails (
    repairid SERIAL PRIMARY KEY,
    customerbike_serialnumber VARCHAR(50) NOT NULL,
    labourhours FLOAT NOT NULL,
    repairdescription VARCHAR(250) NOT NULL
);

-- Create the "usedPart(s)" table
CREATE TABLE usedparts (
    repairdetails_repairid INTEGER NOT NULL,
    bikeparts_partid VARCHAR(50) NOT NULL,
    partquantity INTEGER NOT NULL,
    PRIMARY KEY (bikeparts_partid, repairdetails_repairid)
);

-- Add foreign keys to the tables
ALTER TABLE bikeparts ADD FOREIGN KEY (suppliers_supplierid) REFERENCES suppliers (supplierid);
ALTER TABLE bikeparts ADD FOREIGN KEY (bikeparts_partid) REFERENCES bikeparts (partid);
ALTER TABLE customerbike ADD FOREIGN KEY (customer_customerid) REFERENCES customer (customerid);
ALTER TABLE customerbike ADD FOREIGN KEY (modelbike_modelid) REFERENCES modelbike (modelid);
ALTER TABLE haspart ADD FOREIGN KEY (bikeparts_partid) REFERENCES bikeparts (partid);
ALTER TABLE haspart ADD FOREIGN KEY (modelbike_modelid) REFERENCES modelbike (modelid);
ALTER TABLE modelbike ADD FOREIGN KEY (suppliers_supplierid) REFERENCES suppliers (supplierid);
ALTER TABLE repairdetails ADD FOREIGN KEY (customerbike_serialnumber) REFERENCES customerbike (serialnumber);
ALTER TABLE usedparts ADD FOREIGN KEY (bikeparts_partid) REFERENCES bikeparts (partid);
ALTER TABLE usedparts ADD FOREIGN KEY (repairdetails_repairid) REFERENCES repairdetails (repairid);


INSERT INTO suppliers (suppliername, contactnumber) VALUES
('Supplier 1', '1234567890'),
('Supplier 2', '9876543210'),
('Supplier 3', '5555555555'),
('Supplier 4', '8888888888'),
('Supplier 5', '7777777777');
INSERT INTO bikeparts (partid, partname, suppliers_supplierid, bikeparts_partid, partdescription) VALUES
('BP001', 'Handlebar', 1, NULL, 'Standard handlebar'),
('BP002', 'Seat', 2, NULL, 'Comfortable seat'),
('BP003', 'Tire', 1, NULL, 'Highperformance tire'),
('BP004', 'Brake', 3, NULL, 'Disc brake system'),
('BP005', 'Pedal', 4, NULL, 'Lightweight pedals');
INSERT INTO customer (firstname, lastname, phonenumber, email) VALUES
('John', 'Doe', '5551234', 'john.doe@example.com'),
('Jane', 'Smith', '5555678', 'jane.smith@example.com'),
('Bob', 'Johnson', '5559876', NULL),
('Alice', 'Williams', '5554321', 'alice.w@example.com'),
('Chris', 'Brown', '5553456', NULL);
INSERT INTO modelbike (modelname, suppliers_supplierid, quantityinstock) VALUES
('Mountain Bike', 1, 10),
('Road Bike', 2, 8),
('City Bike', 3, 15),
('Hybrid Bike', 2, 12),
('BMX Bike', 4, 5);
INSERT INTO customerbike (serialnumber, repairstatus, repairnumber, customer_customerid, modelbike_modelid, repairdescription) VALUES
('CB001', 'R', 'R001', 1, 1, 'Wheel replacement'),
('CB002', 'C', 'R002', 2, 2, 'Tire repair'),
('CB003', 'R', 'R003', 3, 1, 'Brake maintenance'),
('CB004', 'R', 'R004', 4, 4, 'Chain replacement'),
('CB005', 'F', 'R005', 5, 3, 'Seat adjustment');
-- Sample data for haspart
INSERT INTO haspart (modelbike_modelid, bikeparts_partid, partquantity) VALUES
(1, 'BP001', 10),
(2, 'BP002', 5),
(3, 'BP003', 12),
(4, 'BP004', 8),
(5, 'BP005', 15);
INSERT INTO repairdetails (customerbike_serialnumber, labourhours, repairdescription) VALUES
('CB001', 2.5, 'Wheel replacement and alignment'),
('CB002', 1.2, 'Tire puncture repair'),
('CB003', 3.0, 'Brake pad replacement'),
('CB004', 2.8, 'Chain installation and lubrication'),
('CB005', 1.5, 'Seat height adjustment');
-- Sample data for usedparts
INSERT INTO usedparts (repairdetails_repairid, bikeparts_partid, partquantity) VALUES
(1, 'BP001', 2),
(2, 'BP003', 4),
(3, 'BP004', 2),
(4, 'BP002', 1),
(5, 'BP005', 3);



GRANT USAGE, CREATE ON SCHEMA bicycle_repair_shop TO receptionist;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA bicycle_repair_shop TO receptionist;

GRANT USAGE, CREATE ON SCHEMA bicycle_repair_shop TO shop_assistant;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA bicycle_repair_shop TO shop_assistant;

GRANT USAGE, CREATE ON SCHEMA bicycle_repair_shop TO owner;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA bicycle_repair_shop TO owner;

GRANT USAGE, CREATE ON SCHEMA bicycle_repair_shop TO mechanic;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA bicycle_repair_shop TO mechanic;

GRANT USAGE, CREATE ON SCHEMA bicycle_repair_shop TO customer;
GRANT SELECT ON ALL TABLES IN SCHEMA bicycle_repair_shop TO customer;


-- Grant EXECUTE permission on a function to the owner
GRANT EXECUTE ON FUNCTION bicycle_repair_shop.my_function TO owner;
